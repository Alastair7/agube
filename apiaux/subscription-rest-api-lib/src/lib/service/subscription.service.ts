/**
 * Subscription API
 * Subscription API REST definition
 *
 * OpenAPI spec version: v1
 * Contact: frannabril@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
    HttpClient, HttpHeaders,
    HttpResponse, HttpEvent
} from '@angular/common/http';

import { Observable } from 'rxjs';

import { Subscription } from '../model/subscription';
import { Permission } from '../model/permission';

import { BASE_PATH } from '../variables';
import { Configuration } from '../configuration';


@Injectable()
export class SubscriptionService {

    protected basePath = 'http://localhost:8000/api/v1/subscription';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     *
     * Endpoint that show list of Subscriptions
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public subscriptionList(observe?: 'body', reportProgress?: boolean): Observable<Array<Subscription>>;
    public subscriptionList(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Subscription>>>;
    public subscriptionList(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Subscription>>>;
    public subscriptionList(observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (Basic) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<Subscription>>(`${this.basePath}/subscription`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     * Endpoint that returns Permission filtered by Subscription
     * @param subscriptionId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public subscriptionPermissionsList(subscriptionId: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Permission>>;
    public subscriptionPermissionsList(subscriptionId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Permission>>>;
    public subscriptionPermissionsList(subscriptionId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Permission>>>;
    public subscriptionPermissionsList(subscriptionId: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (subscriptionId === null || subscriptionId === undefined) {
            throw new Error('Required parameter subscriptionId was null or undefined when calling subscriptionPermissionsList.');
        }

        let headers = this.defaultHeaders;

        // authentication (Basic) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<Permission>>(`${this.basePath}/subscription/${encodeURIComponent(String(subscriptionId))}/permissions`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }
}
